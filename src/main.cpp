/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"
#include "wx/dnd.h"

#include <wx/dirdlg.h>
#include <wx/dir.h>
#include <wx/treectrl.h>
#include <wx/listctrl.h>
#include <wx/arrstr.h>
#include <wx/mimetype.h>
#include <wx/txtstrm.h>
#include "tinyxml/tinyxml.h"
#include <wx/wfstream.h>
// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainDialog( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

class DnDFile : public wxFileDropTarget
{
public:
    DnDFile(MainDialog* d, wxTreeCtrl *pOwner) { m_pOwner = pOwner; dialog = d;}

    virtual bool OnDropFiles(wxCoord x, wxCoord y,
                             const wxArrayString& filenames);

private:
    wxTreeCtrl *m_pOwner;
	MainDialog* dialog;
};

bool DnDFile::OnDropFiles(wxCoord x, wxCoord y, const wxArrayString& filenames)
{
	wxTreeItemId id	;
    size_t nFiles = filenames.GetCount();
	
    for ( size_t n = 0; n < nFiles; n++ )
    {
		wxFileName fn(filenames[n]);		
		if(fn.GetExt() == _T("gpx"))
		{
			//id = m_pOwner->GetRootItem();
			TiXmlDocument doc( filenames[n]);
			doc.LoadFile();

			if(!m_pOwner->GetRootItem())			
			{
				myTreeItemElements* elem = new myTreeItemElements();
				wxFileName fn(filenames[0]);
				elem->file = filenames[0];
				elem->head = MainDialog::ROOT;
				
				m_pOwner->AddRoot(fn.GetFullName(),-1,-1,elem);				
			}
			dialog->appendXMLElement(&doc, m_pOwner,  m_pOwner->GetRootItem());
			dialog->modified = true;
		}
		else
		{
			id = m_pOwner->HitTest(wxPoint(x,y));
			if(id == m_pOwner->GetRootItem() || !id .IsOk() || dialog->getElementsItemData(id)->head == MainDialog::ROUTE)
				return false;
			if(!dialog->getElementsItemData(id)->head == MainDialog::ROUTEPOINT
				|| dialog->getElementsItemData(id)->head == MainDialog::LINKS)				
				if(!(m_pOwner->GetItemParent(id) == m_pOwner->GetRootItem()))			
					id = m_pOwner->GetItemParent(id);
					
			myTreeItemElements* links = new myTreeItemElements();
			m_pOwner->AppendItem(id,fn.GetName(),-1,-1,links);
			links->head = MainDialog::LINKS;
			links->file = filenames[n];
			links->text = fn.GetName();	
			dialog->modified = true;
		}
		

    }
	m_pOwner->ExpandAll();
    return true;
}
////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainDialog::MainDialog(wxWindow *parent) : MainDialogBase( parent )
{
	modified = false;
	textModified = false;
	textPath = wxEmptyString;
}

MainDialog::~MainDialog()
{
}

void MainDialog::OnCloseDialog(wxCloseEvent& event)
{
	Destroy();
}

void MainDialog::OnOKClick(wxCommandEvent& event)
{
	Destroy();
}

void MainDialog::OnCancelClick(wxCommandEvent& event)
{
	Destroy();
}

void MainDialog::OnInit(wxInitDialogEvent& init)
{
	this->m_treeCtrlLayerElements->SetDropTarget(new DnDFile(this,m_treeCtrlLayerElements));
	this->m_textCtrlLabelDir->SetValue(_T("C:\\ProgramData\\opencpn\\layers"));
	fillDirTree(this->m_textCtrlLabelDir->GetValue());	
}

void MainDialog::OnMenuSeletionAddText( wxCommandEvent& event )
{
	this->m_textCtrlEditText->Clear();
	
	wxFileName fn = getElementsItemData(m_treeCtrlLayerElements->GetRootItem())->file;
	wxArrayString files;
	int i = wxDir::GetAllFiles(fn.GetPath(),&files,_T("Unnamed*.*"));
	wxString path = wxString::Format(_T("%s%cUnnamed(%i).txt"),fn.GetPath(),wxFileName::GetPathSeparator(),i);
	textPath = path;
	wxFile f;
	if(!f.Exists(path))
		f.Create(path);
	wxFileName n(path);
	
	myTreeItemElements* elem = new myTreeItemElements();
	elem->head = LINKS;
	elem->text = n.GetFullName();
	elem->file = path;
	m_treeCtrlLayerElements->AppendItem(m_treeCtrlLayerElements->GetSelection(),n.GetFullName(),-1,-1,elem);
	
	this->m_treeCtrlLayerElements->ExpandAll();
	this->m_textCtrlEditText->SetFocus();
	modified = true;
}

void MainDialog::OnTreeItemRightClickLayerElements( wxTreeEvent& event )
{
	int sel = getElementsItemData(event.GetItem())->head;	
	if(event.GetItem() == this->m_treeCtrlLayerElements->GetRootItem() || sel == ROUTE || sel == LINKS)
		this->m_menuItemAddText->Enable(false);
	else
		this->m_menuItemAddText->Enable(true);
	
	m_treeCtrlLayerElements->SelectItem(event.GetItem());
	m_treeCtrlLayerElements->PopupMenu( m_menuRightClickLayerElements, event.GetPoint() );
}

void MainDialog::onTreeItemRightClickDirTree( wxTreeEvent& event )
{
	if(event.GetItem() == this->m_treeCtrlDir->GetRootItem()) return;
	
	m_treeCtrlDir->SelectItem(event.GetItem());
	m_treeCtrlDir->PopupMenu( m_menuRightClickDirTree, event.GetPoint() );	
}

void MainDialog::OnButtonClickNewLayer( wxCommandEvent& event )
{
	if(modified)
		writeXml();
	if(textModified)
		OnTreeSelectionChangedElementsTree( (wxTreeEvent&) event );
	
	this->m_treeCtrlLayerElements->DeleteAllItems();
	myTreeItemElements* elem = new myTreeItemElements();
	elem->file = this->m_textCtrlLabelDir->GetValue() + wxFileName::GetPathSeparator() + _("New Layer.gpx");
	elem->head = ROOT;
    wxFileName fn(elem->file);
	this->m_treeCtrlLayerElements->AddRoot(fn.GetFullName(),-1,-1,elem);
	modified = true;
}

void MainDialog::OnButtonClickLayerDir( wxCommandEvent& event )
{
		wxDirDialog dir(this,_T(""),_T("C:\\ProgramData\\opencpn\\layers"));
		
		if(dir.ShowModal() == wxID_OK)
		{
			this->m_textCtrlLabelDir->SetValue(dir.GetPath());
			fillDirTree(dir.GetPath());
		}	
}

void MainDialog::OnMenuSelectionElementsDelete( wxCommandEvent& event )
{
	if(wxMessageBox(_T("Are You sure ?"),_T("Information"),wxYES|wxNO) == wxYES)
	{
		wxTreeItemId id = this->m_treeCtrlLayerElements->GetSelection();
		this->m_treeCtrlLayerElements->Delete(id);
		this->m_treeCtrlLayerElements->Refresh();
		modified = true;
	}
}
	
void MainDialog::OnMenuSelectionDirTreeDelete( wxCommandEvent& event )
{
	if(wxMessageBox(_T("Are You sure ?"),_T("Information"),wxYES|wxNO) == wxYES)
	{
		wxTreeItemId id = this->m_treeCtrlDir->GetSelection();
//		wxMessageBox(this->getDirTreeItemData(id)->path);
		::wxRemoveFile(this->getDirTreeItemData(id)->path);
		this->m_treeCtrlDir->Delete(id);
		this->m_treeCtrlDir->Refresh();
	}	
}

void MainDialog::OnTreeEndLabelEditDirTree( wxTreeEvent& event )
{
	wxTreeItemId id = this->m_treeCtrlDir->GetSelection();
	wxFileName fn(this->getDirTreeItemData(id)->path);
//	wxMessageBox(this->getDirTreeItemData(id)->path + fn.GetPath() + wxFileName::GetPathSeparator() + event.GetLabel());	
	::wxRenameFile(this->getDirTreeItemData(id)->path,fn.GetPath() + wxFileName::GetPathSeparator() + event.GetLabel());	
}

void MainDialog::OnTreeItemActivatedDirTree( wxTreeEvent& event )
{
	wxTreeItemData* it = this->getDirTreeItemData(this->m_treeCtrlDir->GetSelection());
	if(it)
	{
		wxString str = ((myTreeItemData*)it)->path;
		wxFileName fn(str);
		str.Replace(_T("file:///"),_T(""));
		wxFileType* open = wxTheMimeTypesManager->GetFileTypeFromExtension(fn.GetExt());
		wxString cmd = open->GetOpenCommand(str);
		cmd.Replace(_("/"),wxFileName::GetPathSeparator());
		wxExecute(cmd);
	}	
}

void MainDialog::OnTreeEndLabelEditElements( wxTreeEvent& event )
{
	myTreeItemElements* data = this->getElementsItemData(event.GetItem());
	switch(data->head)
	{
	case LINKS:
					data->text = event.GetLabel();
		break;
	case ROUTE:
	case ROUTEPOINT:
	case WAYPOINT:
					data->name = event.GetLabel();
		break;
	case ROOT:      wxString str = event.GetLabel();
					if(!str.Lower().EndsWith(_T(".gpx")))
					{
						str += _T(".gpx");
						this->m_treeCtrlLayerElements->SetItemText(event.GetItem(),str);					
					}
					wxFileName fn(data->file);
					wxMessageBox(fn.GetPath()+wxFileName::GetPathSeparator()+str);
					data->file = fn.GetPath()+wxFileName::GetPathSeparator()+str;
					OnButtonClickSaveLayerElements( event );				
					fillDirTree(m_textCtrlLabelDir->GetValue());
	break;
	}
	modified = true;
}
		
void MainDialog::OnTreeBeginnDragFile( wxTreeEvent& event )
{
	wxString file = getDirTreeItemData(event.GetItem())->path;
	wxFileDataObject data;
	data.AddFile(file);
	
	wxDropSource dragSource( this->m_treeCtrlDir );
	dragSource.SetData( data );
	wxDragResult result = dragSource.DoDragDrop( TRUE );
	switch (result)
	{
	    case wxDragCopy: /* copy the data */ break;
	    case wxDragMove: /* move the data */ break;
	    default:         /* do nothing */ break;
	}
	

}

void MainDialog::OnTreeSelectionChangedLayerTree( wxTreeEvent& event )
{
	if(((myTreeItemData*)m_treeCtrlDir->GetItemData(event.GetItem())) != NULL)
	{
		if(!this->m_treeCtrlLayerElements->IsEmpty() && modified)
			OnButtonClickSaveLayerElements( event );		
		this->m_treeCtrlLayerElements->DeleteAllItems();
		myTreeItemElements* elem = new myTreeItemElements();
		elem->file = getDirTreeItemData(m_treeCtrlDir->GetSelection())->path;
		elem->head = ROOT;
		this->m_treeCtrlLayerElements->AddRoot(m_treeCtrlDir->GetItemText(m_treeCtrlDir->GetSelection()),-1,-1,elem);		

		TiXmlDocument doc( getDirTreeItemData(event.GetItem())->path );
		doc.LoadFile();
		
		wxTreeItemId root = m_treeCtrlLayerElements->GetRootItem();
		appendXMLElement(&doc,m_treeCtrlLayerElements,root);
		m_treeCtrlLayerElements->SelectItem(root);
		m_treeCtrlLayerElements->Refresh();			
		m_treeCtrlLayerElements->ExpandAll();
		modified = false;
	}
}

void MainDialog::appendXMLElement(TiXmlNode* node, wxTreeCtrl* tree,  wxTreeItemId root, unsigned int indent )
{
	if ( !node ) return;

	static wxString str;
	static myTreeItemElements* elem	;
	static wxTreeItemId treeItemId;	
	static wxTreeItemId treeItemIdrtewp;
	static wxTreeItemId treeItemIdtrkseg;	
	static wxTreeItemId treeItemIdtrkpt;
	
	TiXmlNode* pChild;
	int t = node->Type();
	int num;

	switch ( t )
	{
	case TiXmlNode::TINYXML_ELEMENT:
		if(wxString(node->Value()) == _T("wpt"))
		{	
			elem = new myTreeItemElements();
			elem->head = WAYPOINT;
			
			TiXmlAttribute* pAttrib=node->ToElement()->FirstAttribute();
			if(wxString(pAttrib->Name()) == _T("lon"))
				elem->lon = pAttrib->Value();
			pAttrib=pAttrib->Next();
			if(wxString(pAttrib->Name()) == _T("lat"))
				elem->lat = pAttrib->Value();
				
			treeItemId = tree->AppendItem(root,_T(""),-1,-1,elem);
		}

		if(wxString(node->Value()) == _T("rte"))
		{	
			elem = new myTreeItemElements();
			elem->head = ROUTE;
			
			treeItemId = tree->AppendItem(root,_T(""),-1,-1,elem);			
		}
		
		if(wxString(node->Value()) == _T("trk"))
		{	
			elem = new myTreeItemElements();
			elem->head = TRACK;
			
			treeItemId = tree->AppendItem(root,_T(""),-1,-1,elem);			
		}		
		
		if(wxString(node->Value()) == _T("trkseg"))
		{	
			elem = new myTreeItemElements();
			elem->head = TRACKSEGMENT;
			
			treeItemIdtrkseg = tree->AppendItem(treeItemId,_("TrackSegment"),-1,-1,elem);			
		}
		
		
		if(wxString(node->Value()) == _T("trkpt"))
		{	
			elem = new myTreeItemElements();
			elem->head = TRACKPOINT;
			
			TiXmlAttribute* pAttrib=node->ToElement()->FirstAttribute();
			if(wxString(pAttrib->Name()) == _T("lat"))
				elem->lat = pAttrib->Value();
			pAttrib=pAttrib->Next();
			if(wxString(pAttrib->Name()) == _T("lon"))
				elem->lon = pAttrib->Value();
			
			treeItemId = tree->AppendItem(treeItemIdtrkseg,_T(""),-1,-1,elem);			
		}
		
		if(wxString(node->Value()) == _T("rtept"))
		{	
			elem = new myTreeItemElements();
			elem->head = ROUTEPOINT;
			
			TiXmlAttribute* pAttrib=node->ToElement()->FirstAttribute();
			if(wxString(pAttrib->Name()) == _T("lat"))
				elem->lat = pAttrib->Value();
			pAttrib=pAttrib->Next();
			if(wxString(pAttrib->Name()) == _T("lon"))
				elem->lon = pAttrib->Value();
			
			treeItemIdrtewp = tree->AppendItem(treeItemId,_T(""),-1,-1,elem);			
		}
		
		if(wxString(node->Value()) == _T("name"))
		{
			elem->name = node->ToElement()->GetText();
			switch(elem->head)
			{
			case WAYPOINT:
			case ROUTE:
			case TRACK:
				tree->SetItemText(treeItemId,elem->name);
				break;
			case TRACKSEGMENT:
//				tree->SetItemText(treeItemIdtrkseg,elem->name);
				break;			
			case ROUTEPOINT:
				tree->SetItemText(treeItemIdrtewp,elem->name);
				break;
			case TRACKPOINT:
				tree->SetItemText(treeItemId,elem->name);	
				break;
			}	
		}
		
		if(wxString(node->Value()) == _T("sym"))
		{
			elem->sym = node->ToElement()->GetText();
			wxString str = wxString::Format(_T("%s (%s)"),elem->name,elem->sym);
			
			switch(elem->head)
			{
			case WAYPOINT:
			case ROUTE:				
				tree->SetItemText(treeItemId,str);
				break;
			case ROUTEPOINT:
				tree->SetItemText(treeItemIdrtewp,str);	
				break;
			case TRACKPOINT:
				tree->SetItemText(treeItemId,str);
				break;
			}
		}
		
		if(wxString(node->Value()) == _T("desc"))
			elem->desc = node->ToElement()->GetText();
		
		if(wxString(node->Value()) == _T("opencpn:start"))
			elem->start = node->ToElement()->GetText();
			
		if(wxString(node->Value()) == _T("opencpn:end"))
			elem->end = node->ToElement()->GetText();			
		
		if(wxString(node->Value()) == _T("type"))
			elem->type = node->ToElement()->GetText();
			
		if(wxString(node->Value()) == _T("time"))
			elem->dateTime = node->ToElement()->GetText();	

		if(wxString(node->Value()) == _T("opencpn:viz"))
			elem->viz = node->ToElement()->GetText();

		if(wxString(node->Value()) == _T("opencpn:guid"))
			elem->guid = node->ToElement()->GetText();
			
		if(wxString(node->Value()) == _T("opencpn:viz_name"))
			elem->vizName = node->ToElement()->GetText();			
			
		if(wxString(node->Value()) == _T("opencpn:auto_name"))
			elem->auto_name = node->ToElement()->GetText();
			
		if(wxString(node->Value()) == _T("opencpn:shared"))
			elem->shared = node->ToElement()->GetText();
			
		if(wxString(node->Value()) == _T("link"))
		{
			myTreeItemElements*	elem = new myTreeItemElements();		
			elem->head = LINKS;
			elem->file = wxString(node->ToElement()->FirstAttribute()->Value());
			
			if(node->FirstChildElement())
			{
			node = node->FirstChildElement();
			elem->text = wxString(node->ToElement()->GetText());			
			tree->AppendItem(treeItemId,(wxString&)elem->text,-1,-1,elem);
			}
			
		}
		break;
	case TiXmlNode::TINYXML_COMMENT:
//		wxMessageBox("Comment "+ wxString(node->Value()));
		break;

	case TiXmlNode::TINYXML_UNKNOWN:
//		wxMessageBox( "Unknown" );
		break;

	case TiXmlNode::TINYXML_TEXT:
//		wxMessageBox( "Text "+wxString( node->ToText()->Value() ));
		break;

	case TiXmlNode::TINYXML_DECLARATION:
//		wxMessageBox( "Declaration" );
		break;		
	default:
		break;
	}
//tree->ExpandAll();
	for ( pChild = node->FirstChild(); pChild != 0; pChild = pChild->NextSibling()) 
	{
		appendXMLElement( pChild, tree, root, indent+1 );
	}	
}

void MainDialog::OnButtonClickSaveLayerElements( wxCommandEvent& event )
{
	if(modified)
		writeXml();
	if(textModified)
		OnTreeSelectionChangedElementsTree((wxTreeEvent&) event );

	modified = false;								   
}

void MainDialog::writeXml()
{
	TiXmlDocument doc;  
	TiXmlElement* msg;
	
 	TiXmlDeclaration* decl = new TiXmlDeclaration( "1.0", "UTF-8", "" );  
	doc.LinkEndChild( decl ); 
 
	TiXmlElement *root = new TiXmlElement("gpx");  
	root->SetAttribute( "xmlns:opencpn", "http://www.opencpn.org" );	
    root->SetAttribute( "xsi:schemaLocation", "http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd" );	
    root->SetAttribute( "xmlns:gpxx", "http://www.garmin.com/xmlschemas/GpxExtensions/v3" );
	root->SetAttribute( "xmlns", "http://www.topografix.com/GPX/1/1" );
    root->SetAttribute( "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance" );
	root->SetAttribute ( "creator", "OpenCPN" );	
	root->SetAttribute( "version", "1.1" );	
	doc.LinkEndChild( root ); 	
	
	recursiveWrite(m_treeCtrlLayerElements->GetRootItem(), root, root);
	doc.SaveFile(getElementsItemData(this->m_treeCtrlLayerElements->GetRootItem())->file); 	
}

wxTreeItemId MainDialog::recursiveWrite(wxTreeItemId id, TiXmlElement *elem, TiXmlElement *root)
{
	wxTreeItemIdValue cookie;
	wxTreeItemId item = this->m_treeCtrlLayerElements->GetFirstChild(id, cookie );
	wxTreeItemId child;

	while( item.IsOk() )
	{
		wxString sData = m_treeCtrlLayerElements->GetItemText(item);
		myTreeItemElements* data = getElementsItemData(item);
		
//		wxMessageBox(data->name);
		switch(data->head)
		{
			case ROUTE:
						{		elem = root;
								TiXmlElement *telem = new TiXmlElement("rte");					
								elem->LinkEndChild(telem);
								
								addElement(telem,"name",data->name.c_str());
						
								TiXmlElement* ext = new TiXmlElement("extensions");
								telem->LinkEndChild(ext);	

								addElement(ext,"opencpn:start",data->start.c_str());
								addElement(ext,"opencpn:end",data->end.c_str());							
								addElement(ext,"opencpn:guid",data->guid.c_str());
								addElement(ext,"opencpn:viz",data->viz.c_str());					
								addElement(ext,"opencpn:viz_name",data->vizName.c_str());								
								

						}			
			break;
			case TRACK:
						{		elem = root;
								TiXmlElement *telem = new TiXmlElement("trk");					
								elem->LinkEndChild(telem);
								elem = telem;
								
								addElement(telem,"name",data->name.c_str());
						
								TiXmlElement* ext = new TiXmlElement("extensions");
								telem->LinkEndChild(ext);	

								addElement(ext,"opencpn:start",data->start.c_str());
								addElement(ext,"opencpn:end",data->end.c_str());							
								addElement(ext,"opencpn:viz",data->viz.c_str());
								addElement(ext,"opencpn:guid",data->guid.c_str());
						}				
			break;
			case TRACKSEGMENT:
							{	TiXmlElement *celem = new TiXmlElement("trkseg");					
								elem->LinkEndChild(celem);			
								elem = celem;
							}
			break;
			case ROUTEPOINT:
			case WAYPOINT:
			case TRACKPOINT:
							{	
								TiXmlElement *telem;
								switch(data->head)
								{
									case WAYPOINT:
										elem = root;
										telem = new TiXmlElement("wpt");
										break;
								    case ROUTEPOINT:
										telem = new TiXmlElement("rtept");
										break;
									case TRACKPOINT:
										telem = new TiXmlElement("trkpt");
										break;									
								}
								telem->SetAttribute("lon",data->lon);
								telem->SetAttribute("lat",data->lat);								
								elem->LinkEndChild(telem);
								
								addElement(telem,"time",data->dateTime.c_str());
								addElement(telem,"name",data->name.c_str());
								addElement(telem,"desc",data->desc.c_str());
								addElement(telem,"sym",data->sym.c_str());					
								addElement(telem,"type",data->type.c_str());									
								
								checkLinks(telem,item);
								
								TiXmlElement* ext = new TiXmlElement("extensions");
								telem->LinkEndChild(ext);	
							
								addElement(ext,"opencpn:guid",data->guid.c_str());
								addElement(ext,"opencpn:viz",data->viz.c_str());					
								addElement(ext,"opencpn:viz_name",data->vizName.c_str());
							
							}
			break;
			case LINKS:
			break;
		}
		
		if( m_treeCtrlLayerElements->ItemHasChildren( item ) )
			recursiveWrite( item, elem, root );

		item = m_treeCtrlLayerElements->GetNextChild( id, cookie);
	}
 
	/* Not found */
	wxTreeItemId dummy;
	return dummy;	
}

void MainDialog::addElement(TiXmlElement* root, wxString key, wxString label)
{
	TiXmlElement* celem = new TiXmlElement(key);
	celem->LinkEndChild(new TiXmlText(label));
	root->LinkEndChild(celem);		
}

void MainDialog::checkLinks(TiXmlElement* telem,wxTreeItemId item)
{
	wxTreeItemIdValue cookie;
//		wxMessageBox(this->m_treeCtrlLayerElements->GetItemText(item));	
	if( m_treeCtrlLayerElements->ItemHasChildren( item ) )	
	{
//		wxMessageBox(this->m_treeCtrlLayerElements->GetItemText(item));
		wxTreeItemId it;
		it = this->m_treeCtrlLayerElements->GetFirstChild(item, cookie );
		while(it)
		{
//			wxMessageBox(this->m_treeCtrlLayerElements->GetItemText(it));		
			myTreeItemElements* links = getElementsItemData(it);
							
			TiXmlElement* ext = new TiXmlElement("link");
			ext->SetAttribute("href",links->file.c_str());
			telem->LinkEndChild(ext);	
			TiXmlElement* celem = new TiXmlElement("text");
			celem->LinkEndChild(new TiXmlText(links->text.c_str()));
			ext->LinkEndChild(celem);
			it = this->m_treeCtrlLayerElements->GetNextChild(item, cookie );
		}										
	}	
}

void MainDialog::OnTreeSelectionChangedElementsTree( wxTreeEvent& event )
{
	if(textPath != wxEmptyString)
	{
		wxFFileOutputStream output( textPath );
		wxTextOutputStream text( output );
		
		text << this->m_textCtrlEditText->GetValue();
		output.Close();
	}
	
	this->m_textCtrlEditText->Clear();
	textPath = wxEmptyString;
	textModified = false;
	
	wxFileName fn(getElementsItemData(this->m_treeCtrlLayerElements->GetSelection())->file);
	if(fn.GetExt() == _T("txt"))
	{
		textPath = fn.GetFullPath();
		if(wxFile::Exists(fn.GetFullPath()))
		{
		wxFileInputStream input(fn.GetFullPath());
		wxTextInputStream in(input);
		
		while(!input.Eof())
		{
			wxString t;
			in >> t;
			this->m_textCtrlEditText->AppendText(wxString::FromUTF8(t)+_T("\n"));
		}
		}
	}
}

void MainDialog::OnTreeItemActivatedLayerElements( wxTreeEvent& event )
{
	wxTreeItemData* it = getElementsItemData(m_treeCtrlLayerElements->GetSelection());
	if(it)
	{
		wxString str = ((myTreeItemElements*)it)->file;
		wxFileName fn(str);
		str.Replace(_T("file:///"),_T(""));
		wxFileType* open = wxTheMimeTypesManager->GetFileTypeFromExtension(fn.GetExt());
		wxString cmd = open->GetOpenCommand(str);
		cmd.Replace(_("/"),wxFileName::GetPathSeparator());
		wxExecute(cmd);
	}
}

void MainDialog::fillDirTree(wxString str)
{
	wxArrayString arr,arrdir;

	this->m_treeCtrlDir->DeleteAllItems();
	wxTreeItemId root = this->m_treeCtrlDir->AddRoot("Layers");
	this->m_treeCtrlDir->SelectItem(root);
	
	fillDirRecursive(root,str);
	
	this->m_treeCtrlDir->ExpandAll();
}

void MainDialog::fillDirRecursive(wxTreeItemId root, wxString path)
{
	wxFileName fn(path);
	wxDir dir(path);
	wxString spec;	
	
    if ( dir.IsOpened() )
		if(dir.HasSubDirs())
		{
			wxString p;
			bool t = dir.GetFirst(&p, wxEmptyString, wxDIR_DIRS);				
			while(t)
			{		
				//wxDir dir(p);
				wxTreeItemId id = this->m_treeCtrlDir->AppendItem(root,p);
				fillDirRecursive(id,path+wxFileName::GetPathSeparator()+p);
				t = dir.GetNext(&p);
			}
		}
		
	wxArrayString arr;
	int i = wxDir::GetAllFiles(path,&arr, wxEmptyString, wxDIR_FILES);	
	for(int n = 0; n < i; n++)
	{
		wxFileName fn(arr[n]);
		this->m_treeCtrlDir->AppendItem(root,fn.GetFullName(),-1,-1,new myTreeItemData(arr[n]));
	}	
}

wxTreeItemId MainDialog::findTreeItem(wxTreeCtrl* pTreeCtrl, const wxTreeItemId& root, const wxString& text, bool bCaseSensitive, bool bExactMatch)
{
	wxTreeItemId item=root, child;
	wxTreeItemIdValue cookie;
	wxString findtext(text), itemtext;
	bool bFound;
	if(!bCaseSensitive) findtext.MakeLower();
 
	while(item.IsOk())
	{
		itemtext = pTreeCtrl->GetItemText(item);
		if(!bCaseSensitive) itemtext.MakeLower();
		bFound = bExactMatch ? (itemtext == findtext) : itemtext.Contains(findtext);
		if(bFound) return item;
		child = pTreeCtrl->GetFirstChild(item, cookie);
		if(child.IsOk()) child = findTreeItem(pTreeCtrl, child, text, bCaseSensitive, bExactMatch);
		if(child.IsOk()) return child;
		item = pTreeCtrl->GetNextSibling(item);
	} // while(item.IsOk())
 
	return item;
}

myTreeItemElements* MainDialog::getElementsItemData(wxTreeItemId id)
{
	return ((myTreeItemElements*)m_treeCtrlLayerElements->GetItemData(id));
}

myTreeItemData* MainDialog::getDirTreeItemData(wxTreeItemId id)
{
	return ((myTreeItemData*)this->m_treeCtrlDir->GetItemData(id));
}




