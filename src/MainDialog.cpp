#include "MainDialog.h"
/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/
#include "wx/wxprec.h"

#ifndef  WX_PRECOMP
  #include "wx/wx.h"
#endif //precompiled headers

//    Include a (large) set of XPM images for mark/waypoint icons
#include "folder.xpm"
#include "bitmaps/empty.xpm"
#include "bitmaps/airplane.xpm"
#include "bitmaps/anchorage.xpm"
#include "bitmaps/anchor.xpm"
#include "bitmaps/boarding.xpm"
#include "bitmaps/boundary.xpm"
#include "bitmaps/bouy1.xpm"
#include "bitmaps/bouy2.xpm"
#include "bitmaps/campfire.xpm"
#include "bitmaps/camping.xpm"
#include "bitmaps/circle.xpm"
#include "bitmaps/coral.xpm"
#include "bitmaps/fishhaven.xpm"
#include "bitmaps/fishing.xpm"
#include "bitmaps/fish.xpm"
#include "bitmaps/float.xpm"
#include "bitmaps/food.xpm"
#include "bitmaps/fuel.xpm"
#include "bitmaps/greenlite.xpm"
#include "bitmaps/kelp.xpm"
#include "bitmaps/light1.xpm"
#include "bitmaps/light.xpm"
#include "bitmaps/litevessel.xpm"
#include "bitmaps/mob.xpm"
#include "bitmaps/mooring.xpm"
#include "bitmaps/oilbouy.xpm"
#include "bitmaps/platform.xpm"
#include "bitmaps/redgreenlite.xpm"
#include "bitmaps/redlite.xpm"
#include "bitmaps/rock1.xpm"
#include "bitmaps/rock2.xpm"
#include "bitmaps/sand.xpm"
#include "bitmaps/scuba.xpm"
#include "bitmaps/shoal.xpm"
#include "bitmaps/snag.xpm"
#include "bitmaps/square.xpm"
#include "bitmaps/triangle.xpm"
#include "bitmaps/wreck1.xpm"
#include "bitmaps/wreck2.xpm"
#include "bitmaps/xmblue.xpm"
#include "bitmaps/xmgreen.xpm"
#include "bitmaps/xmred.xpm"
//#include "bitmaps/xmblue_.xpm"
//#include "bitmaps/xmgreen_.xpm"
//#include "bitmaps/xmred_.xpm"
#include "bitmaps/diamond.xpm"
#include "bitmaps/activepoint.xpm"

#include <wx/dirdlg.h>
#include <wx/dir.h>
#include <wx/treectrl.h>
#include <wx/listctrl.h>
#include <wx/arrstr.h>
#include <wx/mimetype.h>
#include <wx/txtstrm.h>
#include "tinyxml/tinyxml.h"
#include <wx/wfstream.h>
#include <wx/dnd.h>
#include "wx/stdpaths.h"
#include <wx/imaglist.h>
#include <wx/uri.h>

#include "LayerManager_pi.h"

#include <map>

class DnDFile : public wxFileDropTarget
{
public:
    DnDFile(MainDialog* d, wxTreeCtrl *pOwner, wxTreeCtrl* pSender) { m_pOwner = pOwner; m_pSender = pSender; dialog = d;}

    virtual bool OnDropFiles(wxCoord x, wxCoord y,
                             const wxArrayString& filenames);

	bool sortInTree(wxTreeCtrl* tree, wxCoord x, wxCoord y, const wxArrayString& filenames);

private:
    wxTreeCtrl *m_pOwner;
	wxTreeCtrl* m_pSender;
	MainDialog* dialog;
};

bool DnDFile::sortInTree(wxTreeCtrl* tree, wxCoord x, wxCoord y, const wxArrayString& filenames)
{
	wxTreeItemId idparent;
	wxTreeItemId prev = dialog->selectionDirTree;
	wxTreeItemId iditem = tree->HitTest(wxPoint(x,y));

	if(prev == iditem) return false;

	if(dialog->getDirTreeItemData(iditem)->ind != MainDialog::DIR)
	{
		idparent = tree->GetItemParent(iditem);
		wxFileName fn(dialog->getDirTreeItemData(iditem)->path);
		iditem = tree->InsertItem(idparent,iditem,tree->GetItemText(prev),-1,-1,
				new myTreeItemData(fn.GetPath() + wxString(wxFileName::GetPathSeparator()) +
				tree->GetItemText(prev),dialog->getDirTreeItemData(prev)->ind));

	}
	else
	{
		idparent = iditem;;
		wxString prevString = tree->GetItemText(prev);

		iditem = tree->InsertItem(idparent,0,prevString,-1,-1,
					new myTreeItemData(dialog->getDirTreeItemData(iditem)->path + 
										wxString(wxFileName::GetPathSeparator()) + prevString,
										dialog->getDirTreeItemData(prev)->ind));

	}

//	wxMessageBox(dialog->getDirTreeItemData(prev)->path+_T("\n")+dialog->getDirTreeItemData(iditem)->path);
	::wxRenameFile(dialog->getDirTreeItemData(prev)->path,dialog->getDirTreeItemData(iditem)->path);
	tree->Delete(prev);
	return true;
}

bool DnDFile::OnDropFiles(wxCoord x, wxCoord y, const wxArrayString& filenames)
{
	wxTreeItemId id	;
	
	//dialog->m_treeCtrlDir->SelectItem(dialog->oldDirTreeItem);
    size_t nFiles = filenames.GetCount();
	if( m_pSender == m_pOwner) return sortInTree(m_pOwner,x,y,filenames);

    for ( size_t n = 0; n < nFiles; n++ )
    {
		wxFileName fn(filenames[n]);		
		if(fn.GetExt() == _T("gpx"))
		{
			//id = m_pOwner->GetRootItem();
			TiXmlDocument doc( filenames[n].mb_str() );
			doc.LoadFile();

			if(!m_pOwner->GetRootItem())			
			{
				myTreeItemElements* elem = new myTreeItemElements();
				wxFileName fn(filenames[0]);
				elem->file = filenames[0];
				elem->head = MainDialog::ROOT;
				
				m_pOwner->AddRoot(fn.GetFullName(),-1,-1,elem);
			}
			::wxRename(filenames[0],filenames[0]+_T("~"));
			dialog->fillDirTree(dialog->m_treeCtrlDir,dialog->pHome_Locn,false);
			dialog->appendXMLElement(&doc, m_pOwner,  m_pOwner->GetRootItem());
			dialog->modified = true;
		}
		else
		{
			id = m_pOwner->HitTest(wxPoint(x,y));
			if(id == m_pOwner->GetRootItem() || !id .IsOk() || dialog->getElementsItemData(id)->head == MainDialog::ROUTE)
				return false;
			if(!(dialog->getElementsItemData(id)->head == MainDialog::ROUTEPOINT)
				|| (dialog->getElementsItemData(id)->head == MainDialog::LINKS))				
				if(!(m_pOwner->GetItemParent(id) == m_pOwner->GetRootItem()))			
					id = m_pOwner->GetItemParent(id);
				
			if(m_pOwner->GetChildrenCount(id) > 5) { wxMessageBox(_("OpenCPN allows maximal 6 Links, sorry")); return false; }

			myTreeItemElements* links = new myTreeItemElements();
			m_pOwner->AppendItem(id,fn.GetName(),40,-1,links);
			links->head = MainDialog::LINKS;
			wxURI uri(_T("file://")+filenames[n]);
#ifdef __WXMSW__			
			links->file = _T("file:///")+uri.GetPath();
#endif
#ifdef __WXGTK__
			links->file = _T("file://")+uri.GetPath();			
#endif
			
			links->text = fn.GetName();	
			dialog->modified = true;
			
			myTreeItemElements* data = dialog->getElementsItemData(dialog->m_treeCtrlLayerElements->GetRootItem());
			wxFileName fn(data->file);
			wxFileName fnfrom(filenames[n]);
			wxString zz = fn.GetPath() + wxFileName::GetPathSeparator() + fnfrom.GetFullName();
			if(!wxFile::Exists(zz))
			{
				::wxCopyFile(filenames[n],zz);
				dialog->fillDirTree(dialog->m_treeCtrlDir,dialog->pHome_Locn,false);
			}
		}
    }
	m_pOwner->ExpandAll();
    return true;
}


MainDialog::MainDialog(wxWindow *parent, LayerManager_pi* p) : MainDialogBase( parent )
{
	this->parent = p;
}

MainDialog::~MainDialog()
{
}

void MainDialog::OnCloseDialog(wxCloseEvent& event)
{
	event.Skip();
	parent->DeInit();

}

void MainDialog::OnOKClick(wxCommandEvent& event)
{
	parent->DeInit();
}

void MainDialog::OnCancelClick(wxCommandEvent& event)
{
	parent->DeInit();
}

void MainDialog::createImageList()
{
	imageList = new wxImageList();
	imageList->Create(16,16);

	imageName = new wxArrayString();
	imageDescription = new wxArrayString();

	imageList->Add(makeImage(folder));		imageName->Add(_T("folder"));		imageDescription->Add(_T("folder"));
	imageList->Add(makeImage(empty));		imageName->Add(_T("empty"));		imageDescription->Add(_T("Empty"));
	imageList->Add(makeImage(airplane));		imageName->Add(_T("airplane"));		imageDescription->Add(_T("Airplane"));
	imageList->Add(makeImage(anchorage));	imageName->Add(_T("anchorage"));	imageDescription->Add(_T("Anchorage"));
	imageList->Add(makeImage(anchor));		imageName->Add(_T("anchor"));		imageDescription->Add(_T("Anchor"));
	imageList->Add(makeImage(boarding));		imageName->Add(_T("boarding"));		imageDescription->Add(_T("Boarding Location"));
	imageList->Add(makeImage(boundary));		imageName->Add(_T("boundary"));		imageDescription->Add(_T("Boundary Mark"));
	imageList->Add(makeImage(bouy1));		imageName->Add(_T("bouy1"));		imageDescription->Add(_T("Bouy Type A"));
	imageList->Add(makeImage(bouy2));		imageName->Add(_T("bouy2"));		imageDescription->Add(_T("Bouy Type B"));
	imageList->Add(makeImage(campfire));		imageName->Add(_T("campfire"));		imageDescription->Add(_T("Campfire"));
	imageList->Add(makeImage(camping));		imageName->Add(_T("camping"));		imageDescription->Add(_T("Camping Spot"));
	imageList->Add(makeImage(circle));		imageName->Add(_T("circle"));		imageDescription->Add(_T("Circle"));
	imageList->Add(makeImage(coral));		imageName->Add(_T("coral"));		imageDescription->Add(_T("Coral"));
	imageList->Add(makeImage(fishhaven));	imageName->Add(_T("fishhaven"));	imageDescription->Add(_T("Fish Haven"));
	imageList->Add(makeImage(fishing));		imageName->Add(_T("fishing"));		imageDescription->Add(_T("Fishing Spot"));
	imageList->Add(makeImage(fish));			imageName->Add(_T("fish"));			imageDescription->Add(_T("Fish"));
	imageList->Add(makeImage(floating));		imageName->Add(_T("float"));		imageDescription->Add(_T("Float"));
	imageList->Add(makeImage(food));			imageName->Add(_T("food"));			imageDescription->Add(_T("Food"));
	imageList->Add(makeImage(fuel));			imageName->Add(_T("fuel"));			imageDescription->Add(_T("Fuel"));
	imageList->Add(makeImage(greenlite));	imageName->Add(_T("greenlite"));	imageDescription->Add(_T("Green Light"));
	imageList->Add(makeImage(kelp));			imageName->Add(_T("kelp"));			imageDescription->Add(_T("Kelp"));
	imageList->Add(makeImage(light1));		imageName->Add(_T("light1"));		imageDescription->Add(_T("Light Type B"));
	imageList->Add(makeImage(light));		imageName->Add(_T("light"));		imageDescription->Add(_T("Light Type A"));
	imageList->Add(makeImage(litevessel));	imageName->Add(_T("litevessel"));	imageDescription->Add(_T("Light Vessel"));
	imageList->Add(makeImage(mob));			imageName->Add(_T("mob"));			imageDescription->Add(_T("MOB"));
	imageList->Add(makeImage(mooring));		imageName->Add(_T("mooring"));		imageDescription->Add(_T("Mooring Bouy"));
	imageList->Add(makeImage(oilbouy));		imageName->Add(_T("oilbouy"));		imageDescription->Add(_T("Oil Bouy"));
	imageList->Add(makeImage(platform));		imageName->Add(_T("platform"));		imageDescription->Add(_T("Platform"));
	imageList->Add(makeImage(redgreenlite)); imageName->Add(_T("redgreenlite"));	imageDescription->Add(_T("Red/Green Light"));
	imageList->Add(makeImage(redlite));		imageName->Add(_T("redlite"));		imageDescription->Add(_T("Red Light"));
	imageList->Add(makeImage(rock1));		imageName->Add(_T("rock1"));		imageDescription->Add(_T("Rock (exposed)"));
	imageList->Add(makeImage(rock2));		imageName->Add(_T("rock2"));		imageDescription->Add(_T("Rock, (awash)"));
	imageList->Add(makeImage(sand));			imageName->Add(_T("sand"));			imageDescription->Add(_T("Sand"));
	imageList->Add(makeImage(scuba));		imageName->Add(_T("scuba"));		imageDescription->Add(_T("Scuba"));
	imageList->Add(makeImage(shoal));		imageName->Add(_T("shoal"));		imageDescription->Add(_T("Shoal"));
	imageList->Add(makeImage(snag));			imageName->Add(_T("snag"));			imageDescription->Add(_T("Snag"));
	imageList->Add(makeImage(square));		imageName->Add(_T("square"));		imageDescription->Add(_T("Square"));
	imageList->Add(makeImage(triangle));		imageName->Add(_T("triangle"));		imageDescription->Add(_T("Triangle"));
	imageList->Add(makeImage(wreck1));		imageName->Add(_T("wreck1"));		imageDescription->Add(_T("Wreck A"));
	imageList->Add(makeImage(wreck2));		imageName->Add(_T("wreck2"));		imageDescription->Add(_T("Wreck B"));
	imageList->Add(makeImage(xmblue));		imageName->Add(_T("xmblue"));		imageDescription->Add(_T("Blue X"));
	imageList->Add(makeImage(xmgreen));		imageName->Add(_T("xmgreen"));		imageDescription->Add(_T("Green X"));
	imageList->Add(makeImage(xmred));		imageName->Add(_T("xmred"));		imageDescription->Add(_T("Red X"));
	imageList->Add(makeImage(empty));		imageName->Add(_T("xmblue"));		imageDescription->Add(_T("Blue Track"));
	imageList->Add(makeImage(empty));		imageName->Add(_T("xmgreen"));		imageDescription->Add(_T("Green Track"));
	imageList->Add(makeImage(empty));		imageName->Add(_T("xmgreen"));		imageDescription->Add(_T("Red Track"));
	imageList->Add(makeImage(diamond));		imageName->Add(_T("diamond"));		imageDescription->Add(_T("Diamond"));
	imageList->Add(makeImage(activepoint));	imageName->Add(_T("activepoint"));	imageDescription->Add(_T("Active WP"));

	this->m_treeCtrlLayerElements->SetImageList(imageList);
	this->m_listCtrlSettingsIcons->SetImageList(imageList,wxIMAGE_LIST_SMALL);

	wxListItem col;
	col.SetColumn(0);
	col.SetWidth(40);
	col.SetText(_("Icon"));
	this->m_listCtrlSettingsIcons->InsertColumn(0,col);

	wxListItem col1;
	col1.SetColumn(1);
	col1.SetWidth(150);
	col1.SetText(_("Description"));
	this->m_listCtrlSettingsIcons->InsertColumn(1,col1);

	for(long i = 0; i < imageList->GetImageCount(); i++)
	{
		long ind = this->m_listCtrlSettingsIcons->InsertItem(i,_T(""),0);
		this->m_listCtrlSettingsIcons->SetItem(ind, 1, (*imageDescription)[i]);

		this->m_listCtrlSettingsIcons->SetItemImage(ind,i);
	}
}

void MainDialog::OnItemActivatedIconsList( wxListEvent& event )
{
	if(this->m_treeCtrlLayerElements->IsEmpty() && 
		this->m_treeCtrlLayerElements->GetSelection() == (wxTreeItemId) 0 ) return;

	modified = true;

	this->m_treeCtrlLayerElements->SetItemImage(this->m_treeCtrlLayerElements->GetSelection(),
		event.GetIndex());
	this->getElementsItemData(this->m_treeCtrlLayerElements->GetSelection())->sym = 
		imageName->Item(event.GetIndex());
	this->m_bitmap1->SetBitmap(this->imageList->GetBitmap(event.GetIndex()));
	this->m_staticText13->SetLabel(this->imageDescription->Item(event.GetIndex()));
}

wxImage MainDialog::makeImage(const char *icon[])
{
	wxBitmap bmp(icon);
	wxImage img = bmp.ConvertToImage();
	return img.Rescale(16,16);
}

void MainDialog::OnInit(wxInitDialogEvent& init)
{
	modified = false;
	textModified = false;
	textPath = wxEmptyString;
	wxArrayString arr;
	showIconsList = false;

	this->m_treeCtrlDir->SelectItem(this->m_treeCtrlDir->GetRootItem());

	createImageList();

	wxStandardPathsBase& std_path = wxStandardPathsBase::Get();
#ifdef __WXMSW__
	wxString stdPath  = std_path.GetConfigDir();
#endif
#ifdef __WXGTK__
	wxString stdPath  = std_path.GetUserDataDir();
#endif
#ifdef __WXOSX__
	wxString stdPath  = std_path.GetUserConfigDir();   // should be ~/Library/Preferences	
#endif

	pHome_Locn = stdPath;
	pHome_Locn += wxString(wxFileName::GetPathSeparator()) + _T("layers");

	if(!wxDir::Exists(pHome_Locn))
		::wxMkDir(pHome_Locn.mb_str(),0777);

	pExplorer_Locn  = _T("");

	this->m_treeCtrlLayerElements->SetDropTarget(new DnDFile(this,m_treeCtrlLayerElements, this->m_treeCtrlDir));
	this->m_treeCtrlDir->SetDropTarget(new DnDFile(this,this->m_treeCtrlDir, this->m_treeCtrlDir));
	this->m_textCtrlLabelDir->SetValue(pHome_Locn);
	fillDirTree(this->m_treeCtrlDir,this->m_textCtrlLabelDir->GetValue(),false);	

	this->sashPosition = 240;
	this->m_splitter1->SetSashPosition(this->sashPosition, true);
	this->m_splitter31->SetSashPosition(this->m_notebook2->GetClientRect().y-30);
}

void MainDialog::OnItemRightClickPaperbag( wxTreeEvent& event )
{
	this->m_treeCtrlTrash->SelectItem(event.GetItem());
	this->m_treeCtrlTrash->PopupMenu(this->m_menuPaperbag,event.GetPoint());
}

void MainDialog::OnMenuItemSelectionPaperbagRecover( wxCommandEvent& event )
{
	wxString str = ((myTreeItemData*)this->m_treeCtrlTrash->GetItemData(this->m_treeCtrlTrash->GetSelection()))->path;
	wxString s = str;
	s.RemoveLast();
	::wxRename(str,s);
	fillDirTree(this->m_treeCtrlTrash,pHome_Locn,true);
	fillDirTree(this->m_treeCtrlDir,pHome_Locn,true);
}

void MainDialog::OnMenuItemPaperbagEmpty( wxCommandEvent& event )
{
	wxString str = this->getDirTreeItemData(this->m_treeCtrlTrash->GetSelection())->path;
	::wxRemoveFile(str);
	this->m_treeCtrlTrash->Delete(this->m_treeCtrlTrash->GetSelection());
}

void MainDialog::OnNotebook1PageChanged( wxNotebookEvent& event )
{
	wxTreeCtrl* tree;
	bool tilde = false;

	switch(event.GetSelection())
	{
	case 0:
		this->m_bpButtonDir->Enable(false);
		tree = this->m_treeCtrlDir;
		this->m_textCtrlLabelDir->SetValue(pHome_Locn);
		tilde = false;
		break;
	case 1:
		{ 
		this->m_bpButtonDir->Enable(true);
		tree = this->m_treeCtrlExplorer;

		if(pExplorer_Locn == wxEmptyString)
		{
		  wxDirDialog dir(this,_("Select a Directory"),pExplorer_Locn);
		  if(dir.ShowModal() == wxID_OK)
		  { 
			  pExplorer_Locn = dir.GetPath();
		 	  this->m_textCtrlLabelDir->SetValue(dir.GetPath());
		  }
		}
		  else
			  this->m_textCtrlLabelDir->SetValue(pExplorer_Locn);
		}
		tilde = false;
		if(pExplorer_Locn == wxEmptyString){this->m_notebook1->ChangeSelection(event.GetSelection()); tree->DeleteAllItems(); return; }
		break;
	case 2:
		this->m_bpButtonDir->Enable(false);
		tree = this->m_treeCtrlTrash;
		tilde = true;
		this->m_textCtrlLabelDir->SetValue(pHome_Locn);
		break;
	}

	//selection = event.GetSelection();
	this->m_notebook1->ChangeSelection(event.GetSelection());
	fillDirTree(tree,this->m_textCtrlLabelDir->GetValue(), tilde);
}

void MainDialog::OnMenuSeletionAddText( wxCommandEvent& event )
{
	this->m_textCtrlEditText->Clear();
	sashPosition = this->m_splitter1->GetSashPosition(); 
	this->m_splitter1->SetSashPosition(100);
	this->m_notebook2->SetSelection(1);

	wxFileName fn = getElementsItemData(m_treeCtrlLayerElements->GetRootItem())->file;
	wxArrayString files;
	int i = wxDir::GetAllFiles(fn.GetPath(),&files,_T("Unnamed*.*"));
	wxString path = wxString::Format(_T("%s%cUnnamed(%i).txt"),fn.GetPath().c_str(),wxFileName::GetPathSeparator(),i);
	textPath = path;
	wxFile f;
	if(!f.Exists(path))
		f.Create(path);
	wxFileName n(path);
	
	myTreeItemElements* elem = new myTreeItemElements();
	elem->head = LINKS;
	elem->text = n.GetFullName();
	elem->file = path;
	m_treeCtrlLayerElements->AppendItem(m_treeCtrlLayerElements->GetSelection(),n.GetFullName(),40,-1,elem);
	
	this->m_treeCtrlLayerElements->ExpandAll();
	this->m_textCtrlEditText->SetFocus();
	modified = true;
}

void MainDialog::OnTreeItemRightClickLayerElements( wxTreeEvent& event )
{
	int sel = getElementsItemData(event.GetItem())->head;	
	if(event.GetItem() == this->m_treeCtrlLayerElements->GetRootItem() || sel == ROUTE || sel == LINKS)
		this->m_menuItemAddText->Enable(false);
	else
		this->m_menuItemAddText->Enable(true);
	
	m_treeCtrlLayerElements->SelectItem(event.GetItem());
	m_treeCtrlLayerElements->PopupMenu( m_menuRightClickLayerElements, event.GetPoint() );
}

void MainDialog::onTreeItemRightClickDirTree( wxTreeEvent& event )
{
	if(event.GetItem() == this->m_treeCtrlDir->GetRootItem()) return;
	
	m_treeCtrlDir->SelectItem(event.GetItem());
	m_treeCtrlDir->PopupMenu( m_menuRightClickDirTree, event.GetPoint() );	
}

void MainDialog::OnButtonClickNewLayer( wxCommandEvent& event )
{
	wxString path;

	if(modified)
		writeXml();
	if(textModified)
		OnTreeSelectionChangedElementsTree( (wxTreeEvent&) event );

	this->m_splitter1->SetSashPosition(sashPosition);
	
	this->m_treeCtrlLayerElements->DeleteAllItems();
	myTreeItemElements* elem = new myTreeItemElements();
	wxString str = _("New Layer");
	int ind = this->getDirTreeItemData(this->m_treeCtrlDir->GetSelection())->ind;
	if(ind == DIR)
		path = this->getDirTreeItemData(this->m_treeCtrlDir->GetSelection())->path;
	else
	{
		wxFileName fn( this->getDirTreeItemData(this->m_treeCtrlDir->GetSelection())->path );
		path = fn.GetPath();
	}
	if(wxFile::Exists(path + wxString(wxFileName::GetPathSeparator()) + str + _T(".gpx")))
	{
		wxArrayString dummy;
		int i = wxDir::GetAllFiles(path,&dummy);
		if(i > 0) str = wxString::Format(_T("%s(%i).gpx"),str.c_str(),i);
	}
	else
		str += _T(".gpx");

	elem->file = path + wxFileName::GetPathSeparator() + str;
	elem->head = ROOT;
    wxFileName fn(elem->file);
	this->m_treeCtrlLayerElements->AddRoot(fn.GetFullName(),0,-1,elem);
	this->writeXml();			
	fillDirTree(this->m_treeCtrlDir,m_textCtrlLabelDir->GetValue(),false);
	wxTreeItemId id = this->findTreeItem(this->m_treeCtrlDir,this->m_treeCtrlDir->GetRootItem(),str,false,true);
	this->m_treeCtrlDir->SelectItem(id);
}

void MainDialog::OnButtonClickLayerDir( wxCommandEvent& event )
{
	if(this->m_notebook1->GetSelection() != 1) return;
	wxDirDialog dir(this,_("Select a Directory"),pHome_Locn);
		
		if(dir.ShowModal() == wxID_OK)
		{
			this->m_textCtrlLabelDir->SetValue(dir.GetPath());
			pExplorer_Locn = dir.GetPath();
			fillDirTree(this->m_treeCtrlExplorer,dir.GetPath(), false);
		}	
}

void MainDialog::OnMenuSelectionElementsDelete( wxCommandEvent& event )
{
	if(wxMessageBox(_T("Are You sure ?"),_T("Information"),wxYES|wxNO) == wxYES)
	{
		wxTreeItemId id = this->m_treeCtrlLayerElements->GetSelection();
		this->m_treeCtrlLayerElements->Delete(id);
		this->m_treeCtrlLayerElements->Refresh();
		modified = true;
	}
}
	
void MainDialog::OnMenuSelectionDirTreeDelete( wxCommandEvent& event )
{
	if(wxMessageBox(_T("Are You sure ?"),_T("Information"),wxYES|wxNO) == wxYES)
	{
		wxTreeItemId id = this->m_treeCtrlDir->GetSelection();
		int ind = this->getDirTreeItemData(id)->ind;
//wxMessageBox(this->getDirTreeItemData(id)->path);
		if(ind == FILE)
		{
//			wxMessageBox(this->getDirTreeItemData(id)->path);
			::wxRemoveFile(this->getDirTreeItemData(id)->path);
		}
		else
#ifdef __WXMSW__
			wxExecute(_T("cmd.exe /C rmdir /S/Q ") + this->getDirTreeItemData(id)->path);
#endif

		this->m_treeCtrlDir->Delete(id);
		this->m_treeCtrlDir->Refresh();
	}	
}

void MainDialog::OnTreeEndLabelEditDirTree( wxTreeEvent& event )
{
	wxTreeItemId id = this->m_treeCtrlDir->GetSelection();
	wxFileName fn(this->getDirTreeItemData(id)->path);
	if(this->getDirTreeItemData(id)->ind == DIR)
	{
		wxString p = this->getDirTreeItemData(id)->path;
		p = p.SubString(0,p.find_last_of(wxFileName::GetPathSeparator()));
		p += event.GetLabel();
		::wxRenameFile(this->getDirTreeItemData(id)->path,p);
	}
	else
		::wxRenameFile(this->getDirTreeItemData(id)->path,fn.GetPath() + wxFileName::GetPathSeparator() + event.GetLabel());	
}

void MainDialog::OnTreeItemActivatedDirTree( wxTreeEvent& event )
{
	wxTreeItemData* it = this->getDirTreeItemData(this->m_treeCtrlDir->GetSelection());
	if(it)
	{
		wxString str = ((myTreeItemData*)it)->path;
		//wxFileName fn(str);
		//str.Replace(_T("file:///"),_T(""));
		//wxFileType* open = wxTheMimeTypesManager->GetFileTypeFromExtension(fn.GetExt());
		//wxString cmd = open->GetOpenCommand(str);
		//cmd.Replace(_("/"),wxString(wxFileName::GetPathSeparator()));
		//wxExecute(cmd);
		::wxLaunchDefaultBrowser(str);
	}	
}

void MainDialog::OnMenuSelectionAddDir( wxCommandEvent& event )
{
	wxString dir;

	myTreeItemData* data = this->getDirTreeItemData(this->m_treeCtrlDir->GetSelection());
	if(data->ind != DIR)
	{
		wxFileName fn(data->path);
		dir  = fn.GetPath();
	}
	else
		dir = data->path;

	dir += wxString(wxFileName::GetPathSeparator()) + _("Unnamed");
	::wxMkDir(dir.mb_str(),0777);
	this->fillDirTree(this->m_treeCtrlDir,this->m_textCtrlLabelDir->GetValue(),false);
}

void MainDialog::OnTreeEndLabelEditElements( wxTreeEvent& event )
{

	myTreeItemElements* data = this->getElementsItemData(event.GetItem());
	if(data->name == event.GetLabel() || event.GetLabel() == wxEmptyString) return;

	switch(data->head)
	{
	case LINKS:
				{	data->text = event.GetLabel();
					wxString temp = data->file;
					wxFileName fn(data->file);
					data->file = fn.GetPath() + wxFileName::GetPathSeparator() + data->text + _T(".") + fn.GetExt();
					::wxRenameFile(temp,data->file);
					fillDirTree(this->m_treeCtrlDir,m_textCtrlLabelDir->GetValue(),false);
				}
		break;
	case ROUTE:
	case ROUTEPOINT:
	case WAYPOINT:
					data->name = event.GetLabel();
		break;
	case ROOT:      wxString str = event.GetLabel();
					if(!str.Lower().EndsWith(_T(".gpx")))
					{
						str += _T(".gpx");
						event.Skip();
						this->m_treeCtrlLayerElements->SetItemText(event.GetItem(),str);
					}
					wxString oldFile = data->file;
					wxFileName fn(data->file);

					if(wxFile::Exists(fn.GetPath()+wxFileName::GetPathSeparator()+str))
					{
						if(wxMessageBox(_("File exsits !\n Override it ?"),_("Information"),wxYES_NO) == wxNO)
							return;
					}
					else
						data->file = fn.GetPath()+wxFileName::GetPathSeparator()+str;

					::wxRenameFile(	oldFile, data->file);			
					fillDirTree(this->m_treeCtrlDir,m_textCtrlLabelDir->GetValue(),false);
	break;
	}
	modified = true;
}
		
void MainDialog::OnTreeBeginnDragFile( wxTreeEvent& event )
{
        this->m_treeCtrlDir->SelectItem(this->oldDirTreeItem);
	//this->oldDirTreeItem = this->m_treeCtrlDir->GetNextVisible(this->oldDirTreeItem);
//wxMessageBox(this->m_treeCtrlDir->GetItemText(this->oldDirTreeItem));
	this->selectionDirTree = event.GetItem();
	myTreeItemData* dat = getDirTreeItemData(event.GetItem());
	if(dat->ind == DIR) return;

	wxString file = dat->path;
	wxFileDataObject data;
	data.AddFile(file);
	
	wxDropSource dragSource( this->m_treeCtrlDir );
	dragSource.SetData( data );
	wxDragResult result = dragSource.DoDragDrop( TRUE );
	switch (result)
	{
	    case wxDragCopy: /* copy the data */ break;
	    case wxDragMove:
/*			{ wxFileName fn(dat->path);
				if(fn.GetExt() == _T("gpx"))
				{
					::wxRename(dat->path,dat->path+_T("~"));
					fillDirTree(this->m_treeCtrlDir,pHome_Locn,false);
				}
			}*/
			break;
	    default:         /* do nothing */ break;
	}
	wxTreeItemId id = this->findTreeItem(this->m_treeCtrlDir, this->m_treeCtrlDir->GetRootItem(), 
					     this->m_treeCtrlLayerElements->GetItemText(this->m_treeCtrlLayerElements->GetRootItem()),false, true);
	this->m_treeCtrlDir->SelectItem(id);
}

void MainDialog::OnTreeBeginDragExplorer( wxTreeEvent& event )
{
	myTreeItemData* dat = getDirTreeItemData(event.GetItem());
	if(dat->ind == DIR) return;

	wxString file = dat->path;
	wxFileDataObject data;
	data.AddFile(file);
	
	wxDropSource dragSource( this->m_treeCtrlExplorer );
	dragSource.SetData( data );
	wxDragResult result = dragSource.DoDragDrop( TRUE );
	switch (result)
	{
	    case wxDragCopy: /* copy the data */ break;
	    case wxDragMove: /* move the data */ break;
	    default:         /* do nothing */ break;
	}
}

void MainDialog::OnTreeSelectionChangedLayerTree( wxTreeEvent& event )
{
	oldDirTreeItem = event.GetOldItem();
	if(this->showIconsList) this->showHideIconsList();

	if(event.GetItem() == this->m_treeCtrlDir->GetRootItem()) return;

	this->selectionDirTree = event.GetItem();
	myTreeItemData* d = getDirTreeItemData(event.GetItem());

	if(d != NULL)
	{
	/*	if((!m_treeCtrlLayerElements->IsEmpty() && modified))
		{
			wxString fileElements = getElementsItemData(this->m_treeCtrlLayerElements->GetRootItem())->file;
			if(wxFile::Exists(fileElements))
				{
					if(wxMessageBox(wxString::Format(_("File %s exists !\n Override it ?"), fileElements.c_str()),_("Information"),wxYES_NO) == wxYES)
						OnButtonClickSaveLayerElements( event );
				}			

		}
*/
		OnButtonClickSaveLayerElements( event );
		this->m_treeCtrlLayerElements->DeleteAllItems();
		wxFileName fn(d->path);
		if(!(fn.GetExt() == _T("gpx"))) return;

		myTreeItemElements* elem = new myTreeItemElements();
		elem->file = getDirTreeItemData(m_treeCtrlDir->GetSelection())->path;
		elem->head = ROOT;
		this->m_treeCtrlLayerElements->AddRoot(m_treeCtrlDir->GetItemText(m_treeCtrlDir->GetSelection()),0,-1,elem);		

		TiXmlDocument doc( getDirTreeItemData(event.GetItem())->path.mb_str() );
		doc.LoadFile();
		
		wxTreeItemId root = m_treeCtrlLayerElements->GetRootItem();
		appendXMLElement(&doc,m_treeCtrlLayerElements,root);
		m_treeCtrlLayerElements->SelectItem(root);
		m_treeCtrlLayerElements->Refresh();			
		m_treeCtrlLayerElements->ExpandAll();
		modified = false;
	}
}

void MainDialog::appendXMLElement(TiXmlNode* node, wxTreeCtrl* tree,  wxTreeItemId root, unsigned int indent )
{
	if ( !node ) return;

	static wxString str;
	static myTreeItemElements* elem	;
	static wxTreeItemId treeItemId;	
	static wxTreeItemId treeItemIdRoute;
	static wxTreeItemId treeItemIdrtewp;
	static wxTreeItemId treeItemIdtrkseg;	
	static wxTreeItemId treeItemIdtrkpt;
	
	TiXmlNode* pChild;
	int t = node->Type();

	switch ( t )
	{
	case TiXmlNode::TINYXML_ELEMENT:
		if(wxString(node->Value(),wxConvUTF8) == _T("wpt"))
		{	
			elem = new myTreeItemElements();
			elem->head = WAYPOINT;
			
			TiXmlAttribute* pAttrib=node->ToElement()->FirstAttribute();
			if(wxString(pAttrib->Name(),wxConvUTF8) == _T("lat"))
				elem->lat = wxString(pAttrib->Value(),wxConvUTF8);
			pAttrib=pAttrib->Next();
			if(wxString(pAttrib->Name(),wxConvUTF8) == _T("lon"))
				elem->lon = wxString(pAttrib->Value(),wxConvUTF8);
				
			treeItemId = tree->AppendItem(root,_T(""),-1,-1,elem);
		}

		if(wxString(node->Value(),wxConvUTF8) == _T("rte"))
		{	
			elem = new myTreeItemElements();
			elem->head = ROUTE;
			
			treeItemIdRoute = tree->AppendItem(root,_T(""),0,-1,elem);			
		}

		if(wxString(node->Value(),wxConvUTF8) == _T("rtept"))
		{	
			elem = new myTreeItemElements();
			elem->head = ROUTEPOINT;
			
			TiXmlAttribute* pAttrib=node->ToElement()->FirstAttribute();
			if(wxString(pAttrib->Name(),wxConvUTF8) == _T("lat"))
				elem->lat = wxString(pAttrib->Value(),wxConvUTF8);
			pAttrib=pAttrib->Next();
			if(wxString(pAttrib->Name(),wxConvUTF8) == _T("lon"))
				elem->lon = wxString(pAttrib->Value(),wxConvUTF8);
			
			treeItemId = tree->AppendItem(treeItemIdRoute,_T(""),-1,-1,elem);			
		}
		
		if(wxString(node->Value(),wxConvUTF8) == _T("trk"))
		{	
			elem = new myTreeItemElements();
			elem->head = TRACK;
			
			treeItemId = tree->AppendItem(root,_T(""),-1,-1,elem);			
		}		
		
		if(wxString(node->Value(),wxConvUTF8) == _T("trkseg"))
		{	
			elem = new myTreeItemElements();
			elem->head = TRACKSEGMENT;
			
			treeItemIdtrkseg = tree->AppendItem(treeItemId,_("TrackSegment"),-1,-1,elem);			
		}
		
		
		if(wxString(node->Value(),wxConvUTF8) == _T("trkpt"))
		{	
			elem = new myTreeItemElements();
			elem->head = TRACKPOINT;
			
			TiXmlAttribute* pAttrib=node->ToElement()->FirstAttribute();
			if(wxString(pAttrib->Name(),wxConvUTF8) == _T("lat"))
				elem->lat = wxString(pAttrib->Value(),wxConvUTF8);
			pAttrib=pAttrib->Next();
			if(wxString(pAttrib->Name(),wxConvUTF8) == _T("lon"))
				elem->lon = wxString(pAttrib->Value(),wxConvUTF8);
			
			treeItemId = tree->AppendItem(treeItemIdtrkseg,_T(""),-1,-1,elem);			
		}
		
		if(wxString(node->Value(),wxConvUTF8) == _T("name"))
		{
			elem->name = wxString(node->ToElement()->GetText(),wxConvUTF8);
			switch(elem->head)
			{
			case ROUTE:
				tree->SetItemText(treeItemIdRoute,elem->name);
				break;
			case WAYPOINT:
			case TRACK:
				tree->SetItemText(treeItemId,elem->name);
				break;
			case TRACKSEGMENT:
//				tree->SetItemText(treeItemIdtrkseg,elem->name);
				break;			
			case ROUTEPOINT:
				tree->SetItemText(treeItemId,elem->name);
				break;
			case TRACKPOINT:
				tree->SetItemText(treeItemId,elem->name);	
				break;
			}	
		}
		
		if(wxString(node->Value(),wxConvUTF8) == _T("sym"))
		{
			elem->sym = wxString(node->ToElement()->GetText(),wxConvUTF8);
			
			switch(elem->head)
			{
			case WAYPOINT:
				tree->SetItemImage(treeItemId,this->getImageName(elem->sym));
				break;
			case ROUTE:	
				tree->SetItemImage(treeItemIdRoute,this->getImageName(elem->sym));
				break;
			case ROUTEPOINT:
				tree->SetItemImage(treeItemId,this->getImageName(elem->sym));
				break;
			case TRACKPOINT:
				tree->SetItemImage(treeItemId,this->getImageName(elem->sym));
				break;
			}


		}
		
		if(wxString(node->Value(),wxConvUTF8) == _T("desc"))
			elem->desc = wxString(node->ToElement()->GetText(),wxConvUTF8);
		
		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:start"))
			elem->start = wxString(node->ToElement()->GetText(),wxConvUTF8);
			
		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:end"))
			elem->end = wxString(node->ToElement()->GetText(),wxConvUTF8);			
		
		if(wxString(node->Value(),wxConvUTF8) == _T("type"))
			elem->type = wxString(node->ToElement()->GetText(),wxConvUTF8);
			
		if(wxString(node->Value(),wxConvUTF8) == _T("time"))
			elem->dateTime = wxString(node->ToElement()->GetText(),wxConvUTF8);	

		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:viz"))
			elem->viz = wxString(node->ToElement()->GetText(),wxConvUTF8);

		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:guid"))
			elem->guid = wxString(node->ToElement()->GetText(),wxConvUTF8);
			
		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:viz_name"))
			elem->vizName = wxString(node->ToElement()->GetText(),wxConvUTF8);			
			
		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:auto_name"))
			elem->auto_name = wxString(node->ToElement()->GetText(),wxConvUTF8);
			
		if(wxString(node->Value(),wxConvUTF8) == _T("opencpn:shared"))
			elem->shared = wxString(node->ToElement()->GetText(),wxConvUTF8);
			
		if(wxString(node->Value(),wxConvUTF8) == _T("link"))
		{
			myTreeItemElements*	elem = new myTreeItemElements();		
			elem->head = LINKS;
			elem->file = wxString(node->ToElement()->FirstAttribute()->Value(),wxConvUTF8);
			
			if(node->FirstChildElement())
			{
			node = node->FirstChildElement();
			elem->text = wxString(node->ToElement()->GetText(),wxConvUTF8);			
			tree->AppendItem(treeItemId,(wxString&)elem->text,40,-1,elem);
			}
			
		}
		break;
	case TiXmlNode::TINYXML_COMMENT:
	case TiXmlNode::TINYXML_UNKNOWN:
	case TiXmlNode::TINYXML_TEXT:
	case TiXmlNode::TINYXML_DECLARATION:
		break;		
	default:
		break;
	}

	for ( pChild = node->FirstChild(); pChild != 0; pChild = pChild->NextSibling()) 
	{
		appendXMLElement( pChild, tree, root, indent+1 );
	}	
}

int MainDialog::getImageName(wxString str)
{
	for(unsigned int i = 0; i < imageName->GetCount(); i++)
		if(imageName->Item(i) == str) return i;

	return -1;
}

void MainDialog::OnButtonClickSaveLayerElements( wxCommandEvent& event )
{
	if(modified)
		writeXml();
	if(textModified)
		OnTreeSelectionChangedElementsTree((wxTreeEvent&) event );

	modified = false;								   
}

void MainDialog::writeXml()
{
	TiXmlDocument doc;  
	
 	TiXmlDeclaration* decl = new TiXmlDeclaration( "1.0", "UTF-8", "" );  
	doc.LinkEndChild( decl ); 
 
	TiXmlElement *root = new TiXmlElement("gpx");  
	root->SetAttribute( "xmlns:opencpn", "http://www.opencpn.org" );	
    root->SetAttribute( "xsi:schemaLocation", "http://www.topografix.com/GPX/1/1 http://www.topografix.com/GPX/1/1/gpx.xsd" );	
    root->SetAttribute( "xmlns:gpxx", "http://www.garmin.com/xmlschemas/GpxExtensions/v3" );
	root->SetAttribute( "xmlns", "http://www.topografix.com/GPX/1/1" );
    root->SetAttribute( "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance" );
	root->SetAttribute ( "creator", "OpenCPN" );	
	root->SetAttribute( "version", "1.1" );	
	doc.LinkEndChild( root ); 	
	
	recursiveWrite(m_treeCtrlLayerElements->GetRootItem(), root, root);
	doc.SaveFile(getElementsItemData(this->m_treeCtrlLayerElements->GetRootItem())->file.mb_str()); 	
}

wxTreeItemId MainDialog::recursiveWrite(wxTreeItemId id, TiXmlElement *elem, TiXmlElement *root)
{
	wxTreeItemIdValue cookie;
	wxTreeItemId item = this->m_treeCtrlLayerElements->GetFirstChild(id, cookie );
	wxTreeItemId child;

	TiXmlElement *route;
	TiXmlElement *track;
	TiXmlElement *trackseg;

	while( item.IsOk() )
	{
		wxString sData = m_treeCtrlLayerElements->GetItemText(item);
		myTreeItemElements* data = getElementsItemData(item);
		
//		wxMessageBox(data->name);
		switch(data->head)
		{
			case ROUTE:
						{		elem = root;
								route = new TiXmlElement("rte");					
								elem->LinkEndChild(route);
								
								addElement(route,"name",data->name.mb_str());
						
								TiXmlElement* ext = new TiXmlElement("extensions");
								route->LinkEndChild(ext);	

								addElement(ext,"opencpn:start",data->start.mb_str());
								addElement(ext,"opencpn:end",data->end.mb_str());
								addElement(ext,"opencpn:viz",data->viz.mb_str());
								addElement(ext,"opencpn:guid",data->guid.mb_str());	
								elem = route;
						}			
			break;
			case TRACK:
						{		elem = root;
								track = new TiXmlElement("trk");					
								elem->LinkEndChild(track);
								elem = track;
								
								addElement(track,"name",data->name.mb_str());
						
								TiXmlElement* ext = new TiXmlElement("extensions");
								track->LinkEndChild(ext);	

								addElement(ext,"opencpn:start",data->start.mb_str());
								addElement(ext,"opencpn:end",data->end.mb_str());	
								addElement(ext,"opencpn:guid",data->guid.mb_str());
								addElement(ext,"opencpn:viz",data->viz.mb_str());
								addElement(ext,"opencpn:viz_name",data->vizName.mb_str());
						}				
			break;
			case TRACKSEGMENT:
							{	trackseg = new TiXmlElement("trkseg");					
								elem->LinkEndChild(trackseg);			
								elem = trackseg;
							}
			break;
			case ROUTEPOINT:
			case WAYPOINT:
			case TRACKPOINT:
							{	
								TiXmlElement *telem;
								switch(data->head)
								{
									case WAYPOINT:
										elem = root;
										telem = new TiXmlElement("wpt");
										break;
								    case ROUTEPOINT:
										telem = new TiXmlElement("rtept");
										break;
									case TRACKPOINT:
										telem = new TiXmlElement("trkpt");
										break;									
								}

								telem->SetAttribute("lat",data->lat.mb_str());
								telem->SetAttribute("lon",data->lon.mb_str());								
								elem->LinkEndChild(telem);
								
								addElement(telem,"time",data->dateTime.mb_str());
								addElement(telem,"name",data->name.mb_str());
								addElement(telem,"desc",data->desc.mb_str());
								addElement(telem,"sym",data->sym.mb_str());	
								addElement(telem,"type",data->type.mb_str());									
								
								checkLinks(telem,item);
								
								TiXmlElement* ext = new TiXmlElement("extensions");
								telem->LinkEndChild(ext);	
							
								addElement(ext,"opencpn:guid",data->guid.mb_str());
								addElement(ext,"opencpn:viz",data->viz.mb_str());
								switch(data->head)
								{
								case ROUTEPOINT: addElement(ext,"opencpn:auto_name",data->auto_name.mb_str()); break;
								case WAYPOINT:   addElement(ext,"opencpn:viz_name",data->vizName.mb_str()); break;
								}
							}
			break;
			case LINKS:
			break;
		}
		
		if( m_treeCtrlLayerElements->ItemHasChildren( item ) )
			recursiveWrite( item, elem, root );

		item = m_treeCtrlLayerElements->GetNextChild( id, cookie);
	}
 
	/* Not found */
	wxTreeItemId dummy;
	return dummy;	
}

void MainDialog::addElement(TiXmlElement* root, const char* key, const char* label)
{
	TiXmlElement* celem = new TiXmlElement(key);
	celem->LinkEndChild(new TiXmlText(label));
	root->LinkEndChild(celem);		
}

void MainDialog::checkLinks(TiXmlElement* telem,wxTreeItemId item)
{
	wxTreeItemIdValue cookie;
//		wxMessageBox(this->m_treeCtrlLayerElements->GetItemText(item));	
	if( m_treeCtrlLayerElements->ItemHasChildren( item ) )	
	{
//		wxMessageBox(this->m_treeCtrlLayerElements->GetItemText(item));
		wxTreeItemId it;
		it = this->m_treeCtrlLayerElements->GetFirstChild(item, cookie );
		while(it)
		{
//			wxMessageBox(this->m_treeCtrlLayerElements->GetItemText(it));		
			myTreeItemElements* links = getElementsItemData(it);
							
			TiXmlElement* ext = new TiXmlElement("link");
			ext->SetAttribute("href",links->file.mb_str());
			telem->LinkEndChild(ext);	
			TiXmlElement* celem = new TiXmlElement("text");
			celem->LinkEndChild(new TiXmlText(links->text.mb_str()));
			ext->LinkEndChild(celem);
			it = this->m_treeCtrlLayerElements->GetNextChild(item, cookie );
		}										
	}	
}

void MainDialog::OnTreeSelectionChangedElementsTree( wxTreeEvent& event )
{
	this->m_splitter1->SetSashPosition(sashPosition);
	if(this->showIconsList) this->showHideIconsList();

	int i = 0;
	for(unsigned int n = 0; n < this->imageName->GetCount(); n++)
	{
	//	wxMessageBox( this->imageName->Item(n)+this->getElementsItemData(event.GetItem())->sym);
		if( this->imageName->Item(n) == this->getElementsItemData(event.GetItem())->sym)
			i = n;
	}

	this->m_bitmap1->SetBitmap(this->imageList->GetBitmap(i));
	this->m_staticText13->SetLabel(this->imageDescription->Item(i));

	if(textPath != wxEmptyString)
	{
		wxFFileOutputStream output( textPath );
		wxTextOutputStream text( output );
		
		text << this->m_textCtrlEditText->GetValue();
		output.Close();
	}
	
	this->m_textCtrlEditText->Clear();
	textPath = wxEmptyString;
	textModified = false;
	
	myTreeItemElements* elem = getElementsItemData(this->m_treeCtrlLayerElements->GetSelection());
	wxFileName fn(elem->file);
	if(fn.GetExt() == _T("txt"))
	{
		sashPosition = this->m_splitter1->GetSashPosition(); 
		this->m_splitter1->SetSashPosition(100);
		this->m_notebook2->SetSelection(1);
		this->m_textCtrlEditText->SetFocus();

		textPath = fn.GetFullPath();
		if(wxFile::Exists(fn.GetFullPath()))
		{
		wxFileInputStream input(fn.GetFullPath());
		wxTextInputStream in(input);
		
		while(!input.Eof())
		{
			wxString t;
			t = in.ReadLine();
			t += _T("\n");
			this->m_textCtrlEditText->AppendText(t);
		}
		}
	}
	else
		this->m_notebook2->SetSelection(0);

	setSettingsPage(elem);
}

void MainDialog::setSettingsPage(myTreeItemElements* elem)
{
	switch(elem->head)
	{
	case ROOT: 			this->m_staticTextSettingsType->SetLabel(_("Layer")); break;
	case ROUTE: 		this->m_staticTextSettingsType->SetLabel(_("Route")); break;
	case ROUTEPOINT:	this->m_staticTextSettingsType->SetLabel(elem->type+_(" / RoutePoint")); break;
	case WAYPOINT:		this->m_staticTextSettingsType->SetLabel(elem->type+_(" / Waypoint")); break;
	case TRACK: 		this->m_staticTextSettingsType->SetLabel(_("Track")); break;
	case TRACKPOINT:	this->m_staticTextSettingsType->SetLabel(elem->type+_(" / Trackpoint")); break;
	case TRACKSEGMENT:	this->m_staticTextSettingsType->SetLabel(_("Tracksegment")); break;
	case LINKS:			this->m_staticTextSettingsType->SetLabel(_("Link")); break;
	}
//	this->m_staticTextSettingsType->SetLabel(elem->type);
	this->m_checkBoxSettingsVisible->SetValue((elem->viz == _T("0"))?0:1);
	this->m_checkBoxSettingsNameVisible->SetValue((elem->vizName == _T("0"))?0:1);
	this->m_textCtrlSettingsName->SetValue(elem->name);
	this->m_textCtrlSetingsDescription->SetValue(elem->desc);
	this->m_textCtrlLatitude->SetValue(elem->lat);
	this->m_textCtrlSettingsLongitude->SetValue(elem->lon);
	this->m_textCtrlDateTime->SetValue(elem->dateTime);
	this->m_textCtrlSettingsStart->SetValue(elem->start);
	this->m_textCtrlSettingsEnd->SetValue(elem->end);
	this->m_textCtrlSettingsLinkName->SetValue(elem->text);
	this->m_staticTextSettingsLinksFile->SetLabel(elem->file);
}

void MainDialog::OnTreeItemActivatedLayerElements( wxTreeEvent& event )
{
	wxTreeItemData* it = getElementsItemData(m_treeCtrlLayerElements->GetSelection());
	if(it)
	{
		wxString str = ((myTreeItemElements*)it)->file;
		::wxLaunchDefaultBrowser(str);
	}
}

void MainDialog:: OnListColClickSettings( wxListEvent& event )
{
	showHideIconsList();
}

void MainDialog::showHideIconsList()
{
	showIconsList = !showIconsList;

	if(showIconsList)
		this->m_splitter31->SetSashPosition(30);
	else
		this->m_splitter31->SetSashPosition(this->m_notebook2->GetClientRect().y-30);
}

void MainDialog::fillDirTree(wxTreeCtrl * tree, wxString str, bool tilde)
{
	wxArrayString arr,arrdir;
	wxTreeItemId root;
	myTreeItemData* data;

	tree->DeleteAllItems();

	switch(this->m_notebook1->GetSelection())
	{
	case 0:
		data = new myTreeItemData(pHome_Locn,DIR);
		root = tree->AddRoot(_T("layers"),-1,-1,data);
		break;
	case 1:
		{
		data = new myTreeItemData(pExplorer_Locn,DIR);
		wxFileName fn(pExplorer_Locn);
		root = tree->AddRoot(fn.GetName(),-1,-1,data);
		}
		break;
	case 2:
		data = new myTreeItemData(pHome_Locn,DIR);
		root = tree->AddRoot(_T("layers"),-1,-1,data);
		break;
	}

//	tree->SelectItem(root);
	
	fillDirRecursive(tree,root,str, tilde);
	
	tree->ExpandAll();
}

void MainDialog::fillDirRecursive(wxTreeCtrl * tree, wxTreeItemId root, wxString path, bool tilde)
{
	wxFileName fn(path);
	wxDir dir(path);
	wxString spec;	
	
    if ( dir.IsOpened() )
		if(dir.HasSubDirs())
		{
			wxString p;
			bool t = dir.GetFirst(&p, wxEmptyString, wxDIR_DIRS);				
			while(t)
			{	
				wxTreeItemId id = tree->AppendItem(root,p,-1,-1,new myTreeItemData(path+wxFileName::GetPathSeparator()+p,DIR));
				fillDirRecursive(tree, id,path+wxFileName::GetPathSeparator()+p, tilde);
				t = dir.GetNext(&p);
			}
		}
		
	wxArrayString arr;
	int i = wxDir::GetAllFiles(path,&arr, wxEmptyString, wxDIR_FILES);	
	for(int n = 0; n < i; n++)
	{
		wxFileName fn(arr[n]);
		if(tree == this->m_treeCtrlTrash)
		{
			if(arr[n].EndsWith(_T("~")))
				tree->AppendItem(root,fn.GetFullName(),-1,-1,new myTreeItemData(arr[n],FILE));
		}
		else if( arr[n].EndsWith(_T("~") ))
				continue;
		else
				tree->AppendItem(root,fn.GetFullName(),-1,-1,new myTreeItemData(arr[n],FILE));
	}	
}

wxTreeItemId MainDialog::findTreeItem(wxTreeCtrl* pTreeCtrl, const wxTreeItemId& root, const wxString& text, bool bCaseSensitive, bool bExactMatch)
{
	wxTreeItemId item=root, child;
	wxTreeItemIdValue cookie;
	wxString findtext(text), itemtext;
	bool bFound;
	if(!bCaseSensitive) findtext.MakeLower();
 
	while(item.IsOk())
	{
		itemtext = pTreeCtrl->GetItemText(item);
		if(!bCaseSensitive) itemtext.MakeLower();
		bFound = bExactMatch ? (itemtext == findtext) : itemtext.Contains(findtext);
		if(bFound) return item;
		child = pTreeCtrl->GetFirstChild(item, cookie);
		if(child.IsOk()) child = findTreeItem(pTreeCtrl, child, text, bCaseSensitive, bExactMatch);
		if(child.IsOk()) return child;
		item = pTreeCtrl->GetNextSibling(item);
	} // while(item.IsOk())
 
	return item;
}

myTreeItemElements* MainDialog::getElementsItemData(wxTreeItemId id)
{
	return ((myTreeItemElements*)m_treeCtrlLayerElements->GetItemData(id));
}

myTreeItemData* MainDialog::getDirTreeItemData(wxTreeItemId id)
{
	return ((myTreeItemData*)this->m_treeCtrlDir->GetItemData(id));
}